import json
import os
import subprocess
import time

import pyautogui
from colorama import Fore

from config import ACCOUNTS_DIR, ACCOUNTS_FILE, DELAY, STEAM_PATH
from generate_2fa import generate_2fa


def load_mafile(account_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ .mafile"""
    path = os.path.join(ACCOUNTS_DIR, f"{account_name}.mafile")
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path}: {e}")
        raise


def load_accounts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∏–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π"""
    accounts = {}
    if os.path.exists(ACCOUNTS_FILE):
        try:
            with open(ACCOUNTS_FILE, 'r', encoding='utf-8') as f:
                for line in f:
                    if ':' in line:
                        login, password = line.strip().split(':', 1)
                        accounts[login] = password
            print(f"{Fore.BLUE}[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {ACCOUNTS_FILE}: {len(accounts)}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {ACCOUNTS_FILE}: {e}")
    return accounts


def find_mafile_accounts():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö .mafile —Ñ–∞–π–ª–æ–≤ –≤ ACCOUNTS_DIR"""
    print(f"{Fore.BLUE}[DEBUG] –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {ACCOUNTS_DIR}")
    mafiles = []
    try:
        for f in os.listdir(ACCOUNTS_DIR):
            print(f"{Fore.BLUE}[DEBUG] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {f}")
            if f.lower().endswith('.mafile'):
                mafiles.append(f)
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–∞–ø–∫–µ {ACCOUNTS_DIR}: {e}")
        return []

    accounts = [os.path.splitext(f)[0] for f in mafiles]
    print(f"{Fore.BLUE}[DEBUG] –ù–∞–π–¥–µ–Ω–æ .mafile —Ñ–∞–π–ª–æ–≤: {len(accounts)}")
    return accounts


def kill_process(name):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print(f"{Fore.GREEN}[INFO] –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: {name}.exe")
    os.system(f"taskkill /f /im {name}.exe >nul 2>&1")
    time.sleep(2)


def clear_steam_auth_data():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Steam"""
    print(f"{Fore.GREEN}[INFO] –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Steam...")
    kill_process("steam")
    loginusers_path = os.path.join(os.path.dirname(STEAM_PATH), "config", "loginusers.vdf")
    try:
        if os.path.exists(loginusers_path):
            os.remove(loginusers_path)
            print(f"{Fore.GREEN}[INFO] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {loginusers_path}")
        else:
            print(f"{Fore.GREEN}[INFO] –§–∞–π–ª {loginusers_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"{Fore.RED}[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ loginusers.vdf: {e}")
    cache_path = os.path.join(os.path.dirname(STEAM_PATH), "appcache")
    try:
        if os.path.exists(cache_path):
            for item in os.listdir(cache_path):
                item_path = os.path.join(cache_path, item)
                if os.path.isfile(item_path):
                    os.remove(item_path)
                    print(f"{Fore.GREEN}[INFO] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {item_path}")
    except Exception as e:
        print(f"{Fore.RED}[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")


def login(account, password, shared_secret, status_label, root):
    """–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞"""
    try:
        clear_steam_auth_data()
        kill_process("steam")

        status_label.config(text="–ó–∞–ø—É—Å–∫–∞–µ–º Steam...", bootstyle="success")
        print(f"{Fore.GREEN}[INFO] –ó–∞–ø—É—Å–∫–∞–µ–º Steam...")
        subprocess.Popen(STEAM_PATH)
        print(f"{Fore.GREEN}[INFO] –û–∂–∏–¥–∞–µ–º {DELAY * 2} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫–Ω–∞ –ª–æ–≥–∏–Ω–∞...")
        time.sleep(DELAY * 2)

        status_label.config(text=f"–í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω: {account}", bootstyle="success")
        print(f"{Fore.GREEN}[INFO] –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω: {account}")
        pyautogui.typewrite(account)
        pyautogui.press('tab')
        status_label.config(text="–í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...", bootstyle="success")
        print(f"{Fore.GREEN}[INFO] –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å")
        pyautogui.typewrite(password)
        pyautogui.press('enter')
        time.sleep(DELAY)

        status_label.config(text="–í–≤–æ–¥–∏–º 2FA-–∫–æ–¥...", bootstyle="success")
        print(f"{Fore.GREEN}[INFO] –í–≤–æ–¥–∏–º 2FA-–∫–æ–¥...")
        code = generate_2fa(shared_secret)
        pyautogui.typewrite(code)
        pyautogui.press('enter')
        status_label.config(text=f"–ö–æ–¥ 2FA –≤–≤–µ–¥—ë–Ω: {code}", bootstyle="info")
        print(f"{Fore.CYAN}üîë {account} | –ö–æ–¥ 2FA: {code}")
        time.sleep(DELAY * 2)

        status_label.config(text="–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'.", bootstyle="success")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
        status_label.config(text=error_msg, bootstyle="danger")
        print(f"{Fore.RED}‚ùå {error_msg}")
        kill_process("steam")
