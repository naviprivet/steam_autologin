import os
import time
import json
import base64
import hmac
import struct
import pyautogui
import subprocess
from datetime import datetime

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
STEAM_PATH = config.STEAM_PATH
ACCOUNTS_DIR = config.ACCOUNTS_DIR
ACCOUNTS_FILE = config.ACCOUNTS_FILE  # –§–∞–π–ª —Å –ª–æ–≥–∏–Ω–∞–º–∏:–ø–∞—Ä–æ–ª—è–º–∏
DELAY = 5


def generate_2fa(shared_secret):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 5-–∑–Ω–∞—á–Ω–æ–≥–æ Steam Guard –∫–æ–¥–∞ —Å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ shared_secret
        if not shared_secret:
            raise ValueError("shared_secret is empty")

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Base64
        try:
            key = base64.b64decode(shared_secret, validate=True)
        except Exception as e:
            raise ValueError(f"Invalid Base64 in shared_secret: {e}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        timestamp = int(time.time())
        print(f"[DEBUG] Timestamp: {timestamp} ({datetime.fromtimestamp(timestamp)})")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ (–≤—Ä–µ–º—è / 30 —Å–µ–∫—É–Ω–¥)
        time_buffer = struct.pack('>Q', timestamp // 30)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ HMAC-SHA1
        hmac_hash = hmac.new(key, time_buffer, 'sha1').digest()
        print(f"[DEBUG] HMAC hash: {hmac_hash.hex()}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Å–µ—Ç–∞
        offset = hmac_hash[-1] & 0x0F
        print(f"[DEBUG] Offset: {offset}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 4 –±–∞–π—Ç —Å —É—á–µ—Ç–æ–º –æ—Ñ—Å–µ—Ç–∞
        code = struct.unpack('>I', hmac_hash[offset:offset + 4])[0] & 0x7FFFFFFF
        print(f"[DEBUG] Raw code: {code}")

        # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–º–≤–æ–ª–æ–≤ Steam Guard (26 —Å–∏–º–≤–æ–ª–æ–≤: 2-9, B-Y, –±–µ–∑ A, I, O, U, Z)
        steam_chars = '23456789BCDFGHJKMNPQRTVWXY'

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 5-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
        final_code = ''
        for _ in range(5):
            code, remainder = divmod(code, len(steam_chars))
            final_code += steam_chars[remainder]

        print(f"[DEBUG] Final 2FA code: {final_code}")
        return final_code

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_2fa: {e}")
        raise


def load_mafile(account_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ .mafile"""
    path = os.path.join(ACCOUNTS_DIR, f"{account_name}.mafile")
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)


def load_accounts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∏–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π"""
    accounts = {}
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if ':' in line:
                    login, password = line.strip().split(':', 1)
                    accounts[login] = password
    return accounts


def find_mafile_accounts():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö .mafile —Ñ–∞–π–ª–æ–≤ –≤ ACCOUNTS_DIR"""
    print(f"[DEBUG] –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {ACCOUNTS_DIR}")
    mafiles = []
    try:
        for f in os.listdir(ACCOUNTS_DIR):
            print(f"[DEBUG] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {f}")
            if f.lower().endswith('.mafile'):
                mafiles.append(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–∞–ø–∫–µ {ACCOUNTS_DIR}: {e}")
        return []

    accounts = [os.path.splitext(f)[0] for f in mafiles]
    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ .mafile —Ñ–∞–π–ª–æ–≤: {len(accounts)}")
    return accounts


def kill_process(name):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    os.system(f"taskkill /f /im {name}.exe >nul 2>&1")
    time.sleep(2)


def login(account, password, shared_secret):
    """–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞"""
    kill_process("steam")

    # –ó–∞–ø—É—Å–∫ Steam
    subprocess.Popen(STEAM_PATH)
    time.sleep(DELAY * 2)

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    pyautogui.typewrite(account)
    pyautogui.press('tab')
    pyautogui.typewrite(password)
    pyautogui.press('enter')
    time.sleep(DELAY)

    # –í–≤–æ–¥ 2FA
    code = generate_2fa(shared_secret)
    pyautogui.typewrite(code)
    pyautogui.press('enter')
    print(f"üîë {account} | –ö–æ–¥ 2FA: {code}")
    time.sleep(DELAY * 2)


def main():
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞—Å–∫–ª–∞–¥–∫–µ
    print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é (US English)!")
    print(f"‚è≥ –î–∞—ë–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∏...")
    time.sleep(5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs(ACCOUNTS_DIR, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª–∏
    passwords = load_accounts()
    if not passwords:
        with open(ACCOUNTS_FILE, 'w', encoding='utf-8') as f:
            f.write("–ª–æ–≥–∏–Ω1:–ø–∞—Ä–æ–ª—å1\n–ª–æ–≥–∏–Ω2:–ø–∞—Ä–æ–ª—å2")
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {ACCOUNTS_FILE}. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ!")
        return

    while True:
        # –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å .mafile
        mafile_accounts = find_mafile_accounts()
        if not mafile_accounts:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ .mafile —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ", ACCOUNTS_DIR)
            return

        print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        for i, account in enumerate(mafile_accounts, 1):
            print(f"{i}. {account}")

        # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            if choice.lower() == 'q':
                break

            choice = int(choice)
            if choice < 1 or choice > len(mafile_accounts):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞!")
                continue

            account = mafile_accounts[choice - 1]
            print(f"\nüöÄ –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç: {account}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–æ–ª—è
            password = passwords.get(account)
            if not password:
                print(f"‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è {account} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {ACCOUNTS_FILE}!")
                continue

            # –ó–∞–≥—Ä—É–∑–∫–∞ mafile –∏ –≤—Ö–æ–¥
            try:
                mafile = load_mafile(account)
                login(account, password, mafile['shared_secret'])

                input("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
                kill_process("steam")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                input("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
                kill_process("steam")

        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞!")
            continue


if __name__ == "__main__":
    pyautogui.FAILSAFE = True
    main()